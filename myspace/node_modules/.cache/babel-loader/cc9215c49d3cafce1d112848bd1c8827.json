{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../../public/chess.jpg';\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-0a55727b\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"棋局\", -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"col-7 img-field\",\n  style: {\n    \"position\": \"relative\"\n  }\n};\n\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-2\"\n}, [/*#__PURE__*/_createCommentVNode(\" ... rest of your code ... \")], -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ContentBase = _resolveComponent(\"ContentBase\");\n\n  return _openBlock(), _createBlock(_component_ContentBase, null, {\n    default: _withCtx(() => [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" Keep the chess image \"), _createElementVNode(\"img\", {\n      ref: \"chessboard\",\n      src: _imports_0,\n      alt: \"\",\n      style: {\n        \"width\": \"80%\",\n        \"height\": \"auto\"\n      },\n      onClick: _cache[0] || (_cache[0] = (...args) => $options.placeChessPiece && $options.placeChessPiece(...args))\n    }, null, 512\n    /* NEED_PATCH */\n    ), _createCommentVNode(\" Position the chess pieces using absolute positioning \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chessPieces, (chessPiece, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        style: _normalizeStyle(chessPiece.style),\n        class: _normalizeClass([\"chess-piece\", {\n          'black-piece': index % 2 === 0,\n          'white-piece': index % 2 !== 0\n        }])\n      }, null, 6\n      /* CLASS, STYLE */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]), _hoisted_5])])]),\n    _: 1\n    /* STABLE */\n\n  });\n}","map":{"version":3,"mappings":";OAUYA,gBAA4B;;;;gEARpCC,oBAAS,GAAT,EAAS,IAAT,EAAG,IAAH,EAAK;AAAA;AAAL;;;EAEKC,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EACJA,KAAK,EAAC;EAAkBC,KAA2B,EAA3B;IAAA;EAAA;;;gEAmB7BF,oBAEM,KAFN,EAEM;EAFDC,KAAK,EAAC;AAEL,CAFN,EAAkB,cAChBE,kDADgB,CAAlB;;AAAA;;;;;uBAxBNC,aA6BcC,sBA7Bd,EA6Bc,IA7Bd,EA6Bc;sBA5BZ,MAAS,CAATC,UAAS,EAETN,oBAyBM,KAzBN,cAyBM,CAxBJA,oBAuBM,KAvBN,cAuBM,CAtBJA,oBAkBM,KAlBN,cAkBM,CAjBJG,6CAiBI,EAhBJH,oBAMC,KAND,EAMC;MALCO,GAAG,EAAC,YAKL;MAJCC,GAA4B,EAA5BT,UAID;MAHCU,GAAG,EAAC,EAGL;MAFCP,KAAiC,EAAjC;QAAA;QAAA;MAAA,CAED;MADEQ,OAAK,yCAAEC,6DAAF;IACP,CAND;;IAAA,CAgBI,EARJR,6EAQI,qBAPJS,oBAMOC,SANP,EAMO,IANP,EAMOC,YALyBC,iBAKzB,EALoC,CAAjCC,UAAiC,EAArBC,KAAqB,KAAhB;2BAD3BL,oBAMO,KANP,EAMO;QAJJM,GAAG,EAAED,KAID;QAHJf,KAAK,kBAAEc,UAAU,CAACd,KAAb,CAGD;QAFLD,KAAK,mBAAC,aAAD,EAAc;UAAA,eACMgB,KAAK,IAAL,KAAK,CADX;UACW,eAA2BA,KAAK,IAAL,KAAK;QAD3C,CAAd;MAEA,CANP;;MAAA;KAMO,CANP;;IAAA,CAOI,EAlBN,CAsBI,EAHJE,UAGI,CAvBN,CAwBI,CAzBN,CAFS,EA4BG;;;;EAAA,CA7Bd","names":["_imports_0","_createElementVNode","class","style","_createCommentVNode","_createBlock","_component_ContentBase","_hoisted_1","ref","src","alt","onClick","$options","_createElementBlock","_Fragment","_renderList","$data","chessPiece","index","key","_hoisted_5"],"sourceRoot":"","sources":["C:\\Users\\DELL\\Desktop\\chess\\myspace\\src\\views\\ChessView.vue"],"sourcesContent":["<template>\r\n  <ContentBase>\r\n    <p>棋局</p>\r\n\r\n    <div class=\"card-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-7 img-field\" style=\"position: relative;\">\r\n          <!-- Keep the chess image -->\r\n          <img\r\n            ref=\"chessboard\"\r\n            src=\"../../public/chess.jpg\"\r\n            alt=\"\"\r\n            style=\"width: 80%; height: auto;\"\r\n            @click=\"placeChessPiece\"\r\n          >\r\n\r\n          <!-- Position the chess pieces using absolute positioning -->\r\n          <div\r\n            v-for=\"(chessPiece, index) in chessPieces\"\r\n            :key=\"index\"\r\n            :style=\"chessPiece.style\"\r\n            class=\"chess-piece\"\r\n            :class=\"{ 'black-piece': index % 2 === 0, 'white-piece': index % 2 !== 0 }\"\r\n          ></div>\r\n        </div>\r\n        <div class=\"col-2\">\r\n          <!-- ... rest of your code ... -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ContentBase>\r\n</template>\r\n\r\n<script>\r\nimport ContentBase from '../components/ContentBase';\r\n\r\nexport default {\r\n  name: 'ChessView',\r\n  components: {\r\n    ContentBase,\r\n  },\r\n  data() {\r\n    return {\r\n      elapsedTime: 0,\r\n      formattedTime: '0 小时 0 分钟 0 秒',\r\n      chessPieceColor: 1,\r\n      chessPieces: [],\r\n    };\r\n  },\r\n  created() {\r\n    this.startTimer();\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      setInterval(() => {\r\n        this.elapsedTime += 1;\r\n        this.formatTime();\r\n      }, 1000);\r\n    },\r\n    formatTime() {\r\n      const hours = Math.floor(this.elapsedTime / 3600);\r\n      const minutes = Math.floor((this.elapsedTime % 3600) / 60);\r\n      const seconds = this.elapsedTime % 60;\r\n\r\n      this.formattedTime = `${hours} 小时 ${minutes} 分钟 ${seconds} 秒`;\r\n    },\r\n    startNewGame() {\r\n      this.elapsedTime = 0;\r\n      this.formattedTime = '0 小时 0 分钟 0 秒';\r\n      this.chessPieces = []; // Clear existing chess pieces\r\n\r\n      // Initialize chessPieceColor based on the selected option\r\n      if (this.chessPieceColor === 1) {\r\n        // If black is selected, the first piece is black\r\n        this.chessPieces.push({\r\n          color: 1,\r\n          style: {\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n          },\r\n        });\r\n      }\r\n    },\r\n    exitGame() {\r\n      this.$router.push('chesslist');\r\n    },\r\n    placeChessPiece(event) {\r\n      // Get the chessboard image dimensions and position\r\n      const chessboardRect = this.$refs.chessboard.getBoundingClientRect();\r\n      const chessboardLeft = chessboardRect.left;\r\n      const chessboardTop = chessboardRect.top;\r\n      const chessboardWidth = chessboardRect.width;\r\n      const chessboardHeight = chessboardRect.height;\r\n\r\n      // Calculate the position relative to the chessboard image\r\n      const x = event.clientX - chessboardLeft;\r\n      const y = event.clientY - chessboardTop;\r\n\r\n      // Check if the click is within the bounds of the chessboard image\r\n      const chessPieceSize = 2; // Adjust the size of the chess piece as needed\r\n\r\n      if (x >= 0 && x <= chessboardWidth && y >= 0 && y <= chessboardHeight) {\r\n        // Adjust to place the center of the chess piece at the click position\r\n        const adjustedX = x - chessPieceSize / 2;\r\n        const adjustedY = y - chessPieceSize / 2;\r\n\r\n        // Create a new chess piece and add it to the array\r\n        this.chessPieces.push({\r\n          color: this.chessPieceColor,\r\n          style: {\r\n            position: 'absolute',\r\n            left: `${adjustedX}px`,\r\n            top: `${adjustedY}px`,\r\n            width: `${chessPieceSize}rem`,\r\n            height: `${chessPieceSize}rem`,\r\n            transform: 'translate(-50%, -50%)', // Center the chess piece\r\n          },\r\n        });\r\n\r\n        // Toggle the chess piece color for the next click\r\n        this.chessPieceColor = this.chessPieceColor === 1 ? 2 : 1;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.img-field {\r\n  position: relative;\r\n}\r\n\r\n.chess-piece {\r\n  position: absolute;\r\n  border-radius: 50%;\r\n}\r\n\r\n.black-piece {\r\n  background-color: black;\r\n  /* Add other styles for the black piece as needed */\r\n}\r\n\r\n.white-piece {\r\n  background-color: white;\r\n  /* Add other styles for the white piece as needed */\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}