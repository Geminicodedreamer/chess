{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../../public/chess.jpg';\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-0a55727b\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"棋局\", -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  style: {\n    \"width\": \"80%\",\n    \"height\": \"auto\"\n  }\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-2\"\n}, [/*#__PURE__*/_createCommentVNode(\" other code remains unchanged \")], -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ContentBase = _resolveComponent(\"ContentBase\");\n\n  return _openBlock(), _createBlock(_component_ContentBase, null, {\n    default: _withCtx(() => [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", {\n      class: \"col-7 img-field\",\n      style: {\n        \"position\": \"relative\"\n      },\n      onClick: _cache[0] || (_cache[0] = (...args) => $options.placeChessPiece && $options.placeChessPiece(...args))\n    }, [_createCommentVNode(\" Keep the chess image \"), _hoisted_4, _createCommentVNode(\" Position the chess pieces using absolute positioning \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chessPieces, (chessPiece, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        style: _normalizeStyle(chessPiece.style),\n        class: _normalizeClass([\"chess-piece\", {\n          'black-piece': index % 2 === 0,\n          'white-piece': index % 2 !== 0\n        }])\n      }, _toDisplayString(chessPiece.number), 7\n      /* TEXT, CLASS, STYLE */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]), _hoisted_5])])]),\n    _: 1\n    /* STABLE */\n\n  });\n}","map":{"version":3,"mappings":";OAQeA,gBAA4B;;;;gEANvCC,oBAAS,GAAT,EAAS,IAAT,EAAG,IAAH,EAAK;AAAA;AAAL;;;EAEKC,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;gEAGPD,oBAA2E,KAA3E,EAA2E;EAAtEE,GAA4B,EAA5BH,UAAsE;EAAzCI,GAAG,EAAC,EAAqC;EAAlCC,KAAiC,EAAjC;IAAA;IAAA;EAAA;AAAkC,CAA3E;;AAAA;;gEAaFJ,oBAEM,KAFN,EAEM;EAFDC,KAAK,EAAC;AAEL,CAFN,EAAkB,cAChBI,qDADgB,CAAlB;;AAAA;;;;;uBApBNC,aAyBcC,sBAzBd,EAyBc,IAzBd,EAyBc;sBAxBZ,MAAS,CAATC,UAAS,EAETR,oBAqBM,KArBN,cAqBM,CApBJA,oBAmBM,KAnBN,cAmBM,CAlBJA,oBAcM,KAdN,EAcM;MAdDC,KAAK,EAAC,iBAcL;MAduBG,KAA2B,EAA3B;QAAA;MAAA,CAcvB;MAdoDK,OAAK,yCAAEC,6DAAF;IAczD,CAdN,GACEL,+CACAM,YAEAN,kGACAO,oBAQMC,SARN,EAQM,IARN,EAQMC,YAP0BC,iBAO1B,EAPqC,CAAjCC,UAAiC,EAArBC,KAAqB,KAAhB;2BAD3BL,oBAQM,KARN,EAQM;QANHM,GAAG,EAAED,KAMF;QALHb,KAAK,kBAAEY,UAAU,CAACZ,KAAb,CAKF;QAJJH,KAAK,mBAAC,aAAD,EAAc;UAAA,eACMgB,KAAK,IAAL,KAAK,CADX;UACW,eAA2BA,KAAK,IAAL,KAAK;QAD3C,CAAd;MAID,CARN,mBAOKD,UAAU,CAACG,OAPhB,EAOsB;MAAA;MAPtB;KAQM,CARN;;IAAA,GALF,CAkBI,EAHJC,UAGI,CAnBN,CAoBI,CArBN,CAFS,EAwBG;;;;EAAA,CAzBd","names":["_imports_0","_createElementVNode","class","src","alt","style","_createCommentVNode","_createBlock","_component_ContentBase","_hoisted_1","onClick","$options","_hoisted_4","_createElementBlock","_Fragment","_renderList","$data","chessPiece","index","key","number","_hoisted_5"],"sourceRoot":"","sources":["C:\\Users\\DELL\\Desktop\\chess\\myspace\\src\\views\\ChessView.vue"],"sourcesContent":["<template>\r\n  <ContentBase>\r\n    <p>棋局</p>\r\n\r\n    <div class=\"card-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-7 img-field\" style=\"position: relative;\" @click=\"placeChessPiece\">\r\n          <!-- Keep the chess image -->\r\n          <img src=\"../../public/chess.jpg\" alt=\"\" style=\"width: 80%; height: auto;\">\r\n\r\n          <!-- Position the chess pieces using absolute positioning -->\r\n          <div\r\n            v-for=\"(chessPiece, index) in chessPieces\"\r\n            :key=\"index\"\r\n            :style=\"chessPiece.style\"\r\n            class=\"chess-piece\"\r\n            :class=\"{ 'black-piece': index % 2 === 0, 'white-piece': index % 2 !== 0 }\"\r\n          >\r\n            {{ chessPiece.number }}\r\n          </div>\r\n        </div>\r\n        <div class=\"col-2\">\r\n          <!-- other code remains unchanged -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ContentBase>\r\n</template>\r\n\r\n<script>\r\nimport ContentBase from '../components/ContentBase';\r\n\r\nexport default {\r\n  name: 'ChessView',\r\n  components: {\r\n    ContentBase,\r\n  },\r\n  data() {\r\n    return {\r\n      elapsedTime: 0,\r\n      formattedTime: '0 小时 0 分钟 0 秒',\r\n      chessPieceColor: 1,\r\n      chessPieces: [],\r\n      timedelta: 0,\r\n    };\r\n  },\r\n  created() {\r\n    this.startTimer();\r\n  },\r\n  methods: {\r\n    // other methods remain unchanged\r\n\r\n    placeChessPiece(event) {\r\n      // Calculate the position relative to the image\r\n      const imgRect = event.target.getBoundingClientRect();\r\n      const x = event.clientX - imgRect.left + 89;\r\n      const y = event.clientY - imgRect.top;\r\n\r\n      // Check if the click is within the bounds of the chessboard image\r\n      const chessboardWidth = imgRect.width;\r\n      const chessboardHeight = imgRect.height;\r\n      const chessPieceSize = 2; // Adjust the size of the chess piece as needed\r\n\r\n      if (x >= 0 && x <= chessboardWidth && y >= 0 && y <= chessboardHeight) {\r\n        // Adjust to place the center of the chess piece at the click position\r\n        const adjustedX = x - chessPieceSize / 2;\r\n        const adjustedY = y - chessPieceSize / 2;\r\n\r\n        // Create a new chess piece and add it to the array with a unique number\r\n        const chessPieceNumber = this.chessPieces.length + 1;\r\n        this.chessPieces.push({\r\n          number: chessPieceNumber,\r\n          color: this.chessPieceColor,\r\n          style: {\r\n            position: 'absolute',\r\n            left: `${adjustedX}px`,\r\n            top: `${adjustedY}px`,\r\n            width: `${chessPieceSize}rem`,\r\n            height: `${chessPieceSize}rem`,\r\n            transform: 'translate(-50%, -50%)', // Center the chess piece\r\n          },\r\n        });\r\n\r\n        // Toggle the chess piece color for the next click\r\n        this.chessPieceColor = this.chessPieceColor === 1 ? 2 : 1;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.img-field {\r\n  position: relative;\r\n}\r\n\r\n.chess-piece {\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white; /* Add text color for better visibility */\r\n  font-weight: bold; /* Make the text bold */\r\n}\r\n\r\n.black-piece {\r\n  background-color: black;\r\n  /* Add other styles for the black piece as needed */\r\n}\r\n\r\n.white-piece {\r\n  background-color: white;\r\n  /* Add other styles for the white piece as needed */\r\n}\r\n\r\n#floatingTextarea2 {\r\n  background-color: rgba(240, 248, 255, 0.6);\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}