{"ast":null,"code":"import ContentBase from '../components/ContentBase';\nexport default {\n  name: 'ChessView',\n  components: {\n    ContentBase\n  },\n\n  data() {\n    return {\n      elapsedTime: 0,\n      formattedTime: '0 小时 0 分钟 0 秒',\n      chessPieceColor: 1,\n      chessPieces: []\n    };\n  },\n\n  created() {\n    this.startTimer();\n  },\n\n  methods: {\n    startTimer() {\n      setInterval(() => {\n        this.elapsedTime += 1;\n        this.formatTime();\n      }, 1000);\n    },\n\n    formatTime() {\n      const hours = Math.floor(this.elapsedTime / 3600);\n      const minutes = Math.floor(this.elapsedTime % 3600 / 60);\n      const seconds = this.elapsedTime % 60;\n      this.formattedTime = `${hours} 小时 ${minutes} 分钟 ${seconds} 秒`;\n    },\n\n    startNewGame() {\n      this.elapsedTime = 0;\n      this.formattedTime = '0 小时 0 分钟 0 秒';\n      this.chessPieces = []; // Clear existing chess pieces\n      // Initialize chessPieceColor based on the selected option\n\n      if (this.chessPieceColor === 1) {\n        // If black is selected, the first piece is black\n        this.chessPieces.push({\n          color: 1,\n          style: {\n            position: 'absolute',\n            left: '50%',\n            top: '50%',\n            transform: 'translate(-50%, -50%)'\n          }\n        });\n      }\n    },\n\n    exitGame() {\n      this.$router.push('chesslist');\n    },\n\n    placeChessPiece(event) {\n      // Get the chessboard image dimensions and position\n      const chessboardRect = this.$refs.chessboard.getBoundingClientRect();\n      const chessboardLeft = chessboardRect.left;\n      const chessboardTop = chessboardRect.top;\n      const chessboardWidth = chessboardRect.width;\n      const chessboardHeight = chessboardRect.height; // Calculate the position relative to the chessboard image\n\n      const x = event.clientX - chessboardLeft;\n      const y = event.clientY - chessboardTop; // Check if the click is within the bounds of the chessboard image\n\n      const chessPieceSize = 2; // Adjust the size of the chess piece as needed\n\n      if (x >= 0 && x <= chessboardWidth && y >= 0 && y <= chessboardHeight) {\n        // Adjust to place the center of the chess piece at the click position\n        const adjustedX = x - chessPieceSize / 2;\n        const adjustedY = y - chessPieceSize / 2; // Create a new chess piece and add it to the array\n\n        this.chessPieces.push({\n          color: this.chessPieceColor,\n          style: {\n            position: 'absolute',\n            left: `${adjustedX}px`,\n            top: `${adjustedY}px`,\n            width: `${chessPieceSize}rem`,\n            height: `${chessPieceSize}rem`,\n            transform: 'translate(-50%, -50%)' // Center the chess piece\n\n          }\n        }); // Toggle the chess piece color for the next click\n\n        this.chessPieceColor = this.chessPieceColor === 1 ? 2 : 1;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["ContentBase","name","components","data","elapsedTime","formattedTime","chessPieceColor","chessPieces","created","startTimer","methods","setInterval","formatTime","hours","Math","floor","minutes","seconds","startNewGame","push","color","style","position","left","top","transform","exitGame","$router","placeChessPiece","event","chessboardRect","$refs","chessboard","getBoundingClientRect","chessboardLeft","chessboardTop","chessboardWidth","width","chessboardHeight","height","x","clientX","y","clientY","chessPieceSize","adjustedX","adjustedY"],"sourceRoot":"","sources":["C:\\Users\\DELL\\Desktop\\chess\\myspace\\src\\views\\ChessView.vue"],"sourcesContent":["<template>\r\n  <ContentBase>\r\n    <p>棋局</p>\r\n\r\n    <div class=\"card-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-7 img-field\" style=\"position: relative;\">\r\n          <!-- Keep the chess image -->\r\n          <img\r\n            ref=\"chessboard\"\r\n            src=\"../../public/chess.jpg\"\r\n            alt=\"\"\r\n            style=\"width: 80%; height: auto;\"\r\n            @click=\"placeChessPiece\"\r\n          >\r\n\r\n          <!-- Position the chess pieces using absolute positioning -->\r\n          <div\r\n            v-for=\"(chessPiece, index) in chessPieces\"\r\n            :key=\"index\"\r\n            :style=\"chessPiece.style\"\r\n            class=\"chess-piece\"\r\n            :class=\"{ 'black-piece': index % 2 === 0, 'white-piece': index % 2 !== 0 }\"\r\n          ></div>\r\n        </div>\r\n        <div class=\"col-2\">\r\n          <!-- ... rest of your code ... -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ContentBase>\r\n</template>\r\n\r\n<script>\r\nimport ContentBase from '../components/ContentBase';\r\n\r\nexport default {\r\n  name: 'ChessView',\r\n  components: {\r\n    ContentBase,\r\n  },\r\n  data() {\r\n    return {\r\n      elapsedTime: 0,\r\n      formattedTime: '0 小时 0 分钟 0 秒',\r\n      chessPieceColor: 1,\r\n      chessPieces: [],\r\n    };\r\n  },\r\n  created() {\r\n    this.startTimer();\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      setInterval(() => {\r\n        this.elapsedTime += 1;\r\n        this.formatTime();\r\n      }, 1000);\r\n    },\r\n    formatTime() {\r\n      const hours = Math.floor(this.elapsedTime / 3600);\r\n      const minutes = Math.floor((this.elapsedTime % 3600) / 60);\r\n      const seconds = this.elapsedTime % 60;\r\n\r\n      this.formattedTime = `${hours} 小时 ${minutes} 分钟 ${seconds} 秒`;\r\n    },\r\n    startNewGame() {\r\n      this.elapsedTime = 0;\r\n      this.formattedTime = '0 小时 0 分钟 0 秒';\r\n      this.chessPieces = []; // Clear existing chess pieces\r\n\r\n      // Initialize chessPieceColor based on the selected option\r\n      if (this.chessPieceColor === 1) {\r\n        // If black is selected, the first piece is black\r\n        this.chessPieces.push({\r\n          color: 1,\r\n          style: {\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n          },\r\n        });\r\n      }\r\n    },\r\n    exitGame() {\r\n      this.$router.push('chesslist');\r\n    },\r\n    placeChessPiece(event) {\r\n      // Get the chessboard image dimensions and position\r\n      const chessboardRect = this.$refs.chessboard.getBoundingClientRect();\r\n      const chessboardLeft = chessboardRect.left;\r\n      const chessboardTop = chessboardRect.top;\r\n      const chessboardWidth = chessboardRect.width;\r\n      const chessboardHeight = chessboardRect.height;\r\n\r\n      // Calculate the position relative to the chessboard image\r\n      const x = event.clientX - chessboardLeft;\r\n      const y = event.clientY - chessboardTop;\r\n\r\n      // Check if the click is within the bounds of the chessboard image\r\n      const chessPieceSize = 2; // Adjust the size of the chess piece as needed\r\n\r\n      if (x >= 0 && x <= chessboardWidth && y >= 0 && y <= chessboardHeight) {\r\n        // Adjust to place the center of the chess piece at the click position\r\n        const adjustedX = x - chessPieceSize / 2;\r\n        const adjustedY = y - chessPieceSize / 2;\r\n\r\n        // Create a new chess piece and add it to the array\r\n        this.chessPieces.push({\r\n          color: this.chessPieceColor,\r\n          style: {\r\n            position: 'absolute',\r\n            left: `${adjustedX}px`,\r\n            top: `${adjustedY}px`,\r\n            width: `${chessPieceSize}rem`,\r\n            height: `${chessPieceSize}rem`,\r\n            transform: 'translate(-50%, -50%)', // Center the chess piece\r\n          },\r\n        });\r\n\r\n        // Toggle the chess piece color for the next click\r\n        this.chessPieceColor = this.chessPieceColor === 1 ? 2 : 1;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.img-field {\r\n  position: relative;\r\n}\r\n\r\n.chess-piece {\r\n  position: absolute;\r\n  border-radius: 50%;\r\n}\r\n\r\n.black-piece {\r\n  background-color: black;\r\n  /* Add other styles for the black piece as needed */\r\n}\r\n\r\n.white-piece {\r\n  background-color: white;\r\n  /* Add other styles for the white piece as needed */\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}